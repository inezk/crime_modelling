OOP framework for package library

Class functions

preprocessing - output is ready to use dataframe  
train (use from preprocessing)
evaluate 
output

prediction method class (abstract methods - empty) - input SpatialDataSet
 - super class  - parent class would set it equal to original SDS object
 		- frame field: each subclass would have a function to set for further preprcossing
 		- model field: prediction output (run fit/train function)
 - (kde, moving avg) subclasses
 	- fit should take target type parameter - subset crime types (scalar or list ex. 1, 2, 3, 4)
 		- collapse along z axis (preprocessing internal function within
 		these subclasses for predict)
 		- kde would need coordinates
 - fit/train (input: dataset, with counts, type = dataset class)
 	- moving avg - param: time_window (default = 52) (by weeks)
 	- kde - bandwidth (default 500 ft), time_window (default 52) (by weeks)
 		- US survey feet default mention
 - predict (input: dataset, without counts, type = dataset class)
 (moving aving, kde would be extensions of predict class)
 - default - train on entire dataset (start - end_date)
 	- can adjust weeks 

 - will directly call models instead of through predict

preprocessing.py - function output would be dataset object 
 - import dataset.py 

 dataset.py - instantiate dataset object
 dataset class 
  - features (dataframe, time x num_grid_cells x num_crime_types (ex. HIERARYCHY field type), type = numpy ndarray)
  - time
  - coordinates (x, y) - (dataframe, 2 x nrow) - corresponding to spatial ID (make sure these are centroids)
  - ID (way to identify points) (dataframe - 1 x nrow, dict - ID: to index)
  - view - features, coords, ids in seeable format
  - export - save to csv 

 evaluation.py
  - graph - percentage burglaries predicted vs percentage street network in hot spot program
  - taking set of predictions vs original crime data to produce curve 
-----
SpatialDataSet
	- counts (numpy nd array of size n_space x n_time x n_types)
	- coordinates (numpy array of size n_space x 2)
	- spatial_identifiers (dict with keys=spatial identifiers, values=correct index into counts/coordinates arrays along spatial dimension)
        - start_date (initial date in ISO 8601 string format: 'YYYY-MM-DD')
        - end_date (end date in ISO 8601 string format)
        - period ('W'/'D'/'M')

---------------
 edit SDS 
 make prediction.py